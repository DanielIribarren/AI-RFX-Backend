"""
üéØ Proposal Generation Service - Generaci√≥n simplificada de propuestas comerciales
Arquitectura refactorizada: Template HTML + IA hace todo + Validaci√≥n m√≠nima
Reducci√≥n: 900+ l√≠neas ‚Üí 180 l√≠neas
"""
import json
import uuid
import re
import time
from datetime import datetime
from typing import Dict, Any, Optional
from pathlib import Path

from backend.models.proposal_models import ProposalRequest, GeneratedProposal, ProposalStatus
from backend.core.config import get_openai_config
from backend.core.database import get_database_client
from backend.services.pricing_config_service_v2 import PricingConfigurationServiceV2

import logging

logger = logging.getLogger(__name__)


class ProposalGenerationService:
    """Servicio ultra-simplificado para generar propuestas comerciales"""
    
    def __init__(self):
        self.openai_config = get_openai_config()
        self.openai_client = None  # Lazy initialization
        self.db_client = get_database_client()
        self.template_html = self._load_template()
        self.pricing_service = PricingConfigurationServiceV2()
    
    def _get_openai_client(self):
        """Lazy initialization of OpenAI client"""
        if self.openai_client is None:
            try:
                from openai import OpenAI  # Import only when needed
                self.openai_client = OpenAI(api_key=self.openai_config.api_key)
            except ImportError:
                raise ImportError(
                    "OpenAI module not installed. Run: pip install openai"
                )
        return self.openai_client
    
    def _load_template(self) -> str:
        """Carga template HTML desde archivo test_design.html"""
        # Usar test_design.html como template principal
        template_path = Path(__file__).parent.parent.parent / "test_design.html"
        
        try:
            with open(template_path, 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            logger.warning(f"Template test_design.html no encontrado: {template_path}")
            return self._get_embedded_template()
    
    def _get_embedded_template(self) -> str:
        """Template embebido como fallback ultra-b√°sico"""
        return """<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Propuesta Comercial</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .company-name { color: #2c5f7c; font-size: 24px; font-weight: bold; }
        .error { color: #ff6b6b; font-style: italic; }
    </style>
</head>
<body>
    <div class="company-name">sabra corporation</div>
    <h2>Propuesta Comercial</h2>
    <p>Template b√°sico de emergencia</p>
</body>
</html>"""
    
    async def generate_proposal(self, rfx_data: Dict[str, Any], proposal_request: ProposalRequest) -> GeneratedProposal:
        """
        M√©todo principal ultra-simplificado: Template + IA hace todo
        
        Args:
            rfx_data: Datos del RFX con cliente, productos, fechas, etc.
            proposal_request: Request con configuraciones adicionales
            
        Returns:
            PropuestaGenerada: Objeto con HTML completo y metadata
        """
        logger.info(f"üöÄ Generando propuesta simplificada para RFX: {proposal_request.rfx_id}")
        
        try:
            # 1. Construir prompt con template y datos
            ai_prompt = self._build_ai_prompt(rfx_data, proposal_request)
            compact_prompt = self._build_compact_ai_prompt(rfx_data, proposal_request)

            # Selecci√≥n preventiva si el prompt es muy largo (evitar context overflow/latencia)
            prompt_to_use = ai_prompt
            if len(ai_prompt) > 120_000:  # ~aprox a 120k chars; muy grande
                logger.warning("‚ö†Ô∏è Prompt completo demasiado largo. Usando versi√≥n compacta preventivamente")
                prompt_to_use = compact_prompt

            # 2. Llamada a OpenAI con retry inteligente (compact fallback en timeout)
            try:
                html_content = await self._call_openai(prompt_to_use, max_tokens=min(2500, self.openai_config.max_tokens))
            except Exception as e:
                error_msg = str(e).lower()
                if any(k in error_msg for k in ["timeout", "timed out", "request timed out"]):
                    logger.warning("‚è±Ô∏è Timeout con prompt completo. Reintentando con prompt compacto y menos tokens...")
                    time.sleep(1)
                    html_content = await self._call_openai(compact_prompt, max_tokens=min(1500, self.openai_config.max_tokens))
                else:
                    raise
            
            # 3. Validaci√≥n con logging detallado - NO usar template b√°sico
            is_valid = self._validate_html(html_content)
            if not is_valid:
                logger.error("‚ùå HTML validation failed - but continuing with generated content instead of fallback")
                logger.error("‚ùå This indicates an issue with AI generation or validation criteria")
                # Continue with the generated HTML instead of falling back
            
            # 4. Crear objeto de respuesta
            proposal = self._create_proposal_object(rfx_data, html_content, proposal_request)
            
            # 5. Guardar en BD
            await self._save_to_database(proposal)
            
            logger.info(f"‚úÖ Propuesta generada exitosamente: {proposal.id}")
            return proposal
            
        except Exception as e:
            logger.error(f"‚ùå CRITICAL Error generando propuesta: {e}")
            logger.error(f"‚ùå Fallback disabled - this error needs to be fixed at the source")
            # Re-raise the exception instead of using fallback
            raise Exception(f"Proposal generation failed: {e}. Fallback disabled to force fixing root cause.")
    
    def _build_ai_prompt(self, rfx_data: Dict[str, Any], proposal_request: ProposalRequest) -> str:
        """Construye prompt inteligente para OpenAI con template y datos del RFX"""
        
        client_info = rfx_data.get("companies", {}) if isinstance(rfx_data.get("companies"), dict) else {}
        productos = rfx_data.get("productos", [])  # Usar "productos" en espa√±ol para consistencia
        rfx_id = proposal_request.rfx_id
        
        # üÜï Extraer moneda del RFX (desde BD V2.0)
        rfx_currency = rfx_data.get("currency", "USD")  # Fallback a USD si no hay moneda
        logger.debug(f"üí∞ Currency extracted from RFX data: {rfx_currency}")
        
        # Obtener configuraci√≥n de pricing
        pricing_config = self.pricing_service.get_rfx_pricing_configuration(rfx_id)
        
        # Preparar datos estructurados para la IA con precios reales
        productos_info = []
        subtotal = 0.0
        for producto in productos:
            precio_unitario = producto.get("estimated_unit_price", 0.0)
            cantidad = producto.get("quantity", producto.get("cantidad", 1))
            total_producto = precio_unitario * cantidad
            subtotal += total_producto
            
            productos_info.append({
                "nombre": producto.get("name", producto.get("nombre", "product")),
                "cantidad": cantidad,
                "unidad": producto.get("unit", producto.get("unidad", "units")),
                "precio_unitario": precio_unitario,
                "total": total_producto
            })
        
        # Calcular pricing con configuraciones
        pricing_calculation = self.pricing_service.calculate_pricing(rfx_id, subtotal)
        
        # Preparar instrucciones de pricing para la IA
        pricing_instructions = self._build_pricing_instructions(pricing_calculation, pricing_config)
        
        # üÜï Preparar instrucciones de moneda para la IA
        currency_instructions = self._build_currency_instructions(rfx_currency)
        
        prompt = f"""
<system>
Eres un asistente experto especializado en la generaci√≥n de presupuestos comerciales profesionales para Sabra Corporation. Tu funci√≥n principal es transformar datos estructurados de solicitudes (RFX) en documentos HTML comerciales de alta calidad, adapt√°ndote inteligentemente al contexto y requerimientos espec√≠ficos de cada cliente.

Combinas precisi√≥n t√©cnica con flexibilidad comercial, manteniendo siempre los est√°ndares profesionales de la empresa mientras te adaptas a las necesidades particulares de cada solicitud.
</system>

<role>
Act√∫as como un generador inteligente de presupuestos HTML, especializado en:
- An√°lisis autom√°tico de dominios de negocio (catering, construcci√≥n, tecnolog√≠a, log√≠stica, etc.)
- Aplicaci√≥n de l√≥gica condicional para servicios adicionales
- C√°lculos matem√°ticos precisos y verificables
- Adaptaci√≥n flexible seg√∫n especificaciones del usuario
- Generaci√≥n de HTML profesional y renderizable
- Compatibilidad perfecta con Playwright para conversi√≥n PDF
- Mantenimiento de est√°ndares comerciales de Sabra Corporation

Tu expertise abarca m√∫ltiples industrias y te adaptas al contexto espec√≠fico de cada solicitud, manteniendo siempre la calidad y profesionalismo en los documentos generados.
</role>

<context>
INFORMACI√ìN DE LA SOLICITUD:
- Solicitante: {client_info.get('name', 'Solicitante')}
- Email: {client_info.get('email', '')}
- Empresa: {client_info.get('company', '')}
- Lugar de entrega: {rfx_data.get('location', 'Por definir')}
- Fecha de entrega: {rfx_data.get('delivery_date', 'Por definir')}
- N√∫mero de personas (si aplica): {rfx_data.get('people_count', '')}
- Solicitud de costo por persona: {rfx_data.get('cost_per_person_requested', False)}

PRODUCTOS Y SERVICIOS:
{json.dumps(productos_info, ensure_ascii=False, indent=2)}

ESPECIFICACIONES ADICIONALES DEL USUARIO:
{proposal_request.notes if hasattr(proposal_request, 'notes') and proposal_request.notes else "Ninguna - usar configuraci√≥n est√°ndar"}

CONFIGURACIONES DE PRICING:
{pricing_instructions if pricing_instructions else "Usar configuraci√≥n est√°ndar"}

CONFIGURACI√ìN DE MONEDA:
{currency_instructions}
TEMPLATE HTML DE REFERENCIA:
{self.template_html}

FECHA ACTUAL: {datetime.now().strftime('%d/%m/%y')}

Trabajas en un entorno empresarial donde cada presupuesto debe reflejar profesionalismo y precisi√≥n. Los clientes esperan documentos de calidad comercial que puedan presentar internamente o a sus stakeholders. La flexibilidad es clave, pero sin comprometer la estructura fundamental del presupuesto. El HTML generado DEBE ser compatible con Playwright para conversi√≥n a PDF.
</context>

<instructions>
<step>1. AN√ÅLISIS INTELIGENTE DEL CONTEXTO</step>
    <substep>‚Ä¢ Identifica el dominio del presupuesto (catering, construcci√≥n, tecnolog√≠a, eventos, log√≠stica, servicios profesionales, etc.)</substep>
    <substep>‚Ä¢ Determina si los productos requieren categorizaci√≥n autom√°tica por tipo</substep>
    <substep>‚Ä¢ Eval√∫a si aplica "Coordinaci√≥n y log√≠stica" seg√∫n la naturaleza del proyecto y servicios involucrados</substep>
    <substep>‚Ä¢ Analiza las especificaciones adicionales del usuario para adaptaciones espec√≠ficas</substep>

<step>2. PROCESAMIENTO INTELIGENTE DE DATOS</step>
    <substep>‚Ä¢ Completa nombres de empresas conocidas si vienen abreviados (ej: "Chevron" ‚Üí "Chevron Global Technology Services Company")</substep>
    <substep>‚Ä¢ Organiza productos por categor√≠as relevantes cuando sea apropiado para el dominio</substep>
    <substep>‚Ä¢ Calcula autom√°ticamente: cantidad √ó precio_unitario = total por cada producto</substep>
    <substep>‚Ä¢ Genera subtotal sumando todos los totales de productos</substep>

<step>3. APLICACI√ìN DE REGLAS CONDICIONALES</step>
    <substep>‚Ä¢ COORDINACI√ìN Y LOG√çSTICA: Incluir autom√°ticamente cuando el proyecto requiera coordinaci√≥n, gesti√≥n, organizaci√≥n o servicios log√≠sticos</substep>
    <substep>‚Ä¢ Aplica a mayor√≠a de dominios: catering, eventos, construcci√≥n, log√≠stica, servicios t√©cnicos, instalaciones, servicios profesionales</substep>
    <substep>‚Ä¢ NO aplica a: ventas directas simples, productos de retail b√°sico sin servicios</substep>
    <substep>‚Ä¢ Calcular coordinaci√≥n y log√≠stica como 18% del subtotal cuando aplique</substep>
    <substep>‚Ä¢ Si cost_per_person_requested = True: calcular y mostrar prominentemente "Costo por persona" = total_final √∑ people_count</substep>
    <substep>‚Ä¢ Si hay especificaciones adicionales: adaptarse a los requerimientos espec√≠ficos manteniendo la estructura profesional base</substep>

<step>4. GENERACI√ìN DEL HTML FINAL</step>
    <substep>‚Ä¢ Reemplazar todos los marcadores del template con datos procesados:</substep>
        <subitem>[FECHA] ‚Üí Fecha actual en formato DD/MM/YY</subitem>
        <subitem>[NUMERO] ‚Üí PROP-DDMMYY-XXX (c√≥digo √∫nico)</subitem>
        <subitem>[CLIENTE] ‚Üí Nombre del cliente en MAY√öSCULAS</subitem>
        <subitem>[EMPRESA] ‚Üí Nombre completo oficial de la empresa</subitem>
        <subitem>[PROCESO] ‚Üí Descripci√≥n contextual del proceso seg√∫n dominio</subitem>
        <subitem>[PRODUCTOS_ROWS] ‚Üí Filas HTML organizadas y categorizadas</subitem>
        <subitem>[SUBTOTAL] ‚Üí Suma total de todos los productos</subitem>
        <subitem>[COORDINACION] ‚Üí 18% del subtotal si aplica</subitem>
        <subitem>[TOTAL] ‚Üí Total final (subtotal + coordinaci√≥n si aplica)</subitem>
        <subitem>[COSTO_PERSONA] ‚Üí Total √∑ personas solo si se solicita expl√≠citamente</subitem>
    <substep>‚Ä¢ Asegurar que el HTML sea v√°lido, funcional y renderizable en navegadores</substep>
    <substep>‚Ä¢ Mantener estructura responsive y profesional del template base</substep>
    <substep>‚Ä¢ NUNCA iniciar el c√≥digo HTML con ```html ni terminarlo con ```, generar HTML limpio directamente</substep>
    <substep>‚Ä¢ NO agregar estilos CSS incompatibles con Playwright para conversi√≥n PDF</substep>
    <substep>‚Ä¢ SOLO usar CSS compatible con Playwright/Chromium para PDF: flexbox, grid, border-radius, box-shadow, transforms b√°sicos</substep>
    <substep>‚Ä¢ OBLIGATORIO: Incluir -webkit-print-color-adjust: exact !important en elementos con colores de fondo</substep>
    <substep>‚Ä¢ EVITAR: viewport units (vw, vh), hover states, transitions, animations, backdrop-filter</substep>
    <substep>‚Ä¢ USAR: px, %, cm, pt para unidades; font-family web-safe; colores con !important para elementos cr√≠ticos</substep>
    <substep>‚Ä¢ NO AGREGAR Notas adicionales como como las CONFIGURACIONES DE PRICING o currency</substep>
</instructions>

<criteria>
<requirement>PRECISI√ìN MATEM√ÅTICA: Todos los c√°lculos deben ser exactos, verificables y consistentes</requirement>
<requirement>FLEXIBILIDAD INTELIGENTE: Adaptarse a especificaciones adicionales sin perder profesionalismo ni funcionalidad</requirement>
<requirement>CONSISTENCIA DE DATOS: Usar SIEMPRE los precios definidos en los datos de entrada, nunca inventar o modificar valores</requirement>
<requirement>COMPLETITUD CONTEXTUAL: Incluir todos los elementos requeridos seg√∫n el dominio y contexto espec√≠fico</requirement>
<requirement>PROFESIONALISMO COMERCIAL: Mantener formato de alta calidad apto para presentaciones empresariales</requirement>
<requirement>COMPATIBILIDAD PLAYWRIGHT: Generar HTML/CSS 100% compatible con Playwright para conversi√≥n PDF sin errores</requirement>
<requirement>VALIDEZ T√âCNICA: Generar c√≥digo HTML funcional, bien estructurado y sin marcadores de c√≥digo (```)</requirement>
<requirement>ADAPTABILIDAD CONTROLADA: Ser flexible con formatos y presentaci√≥n manteniendo siempre los est√°ndares de calidad</requirement>
</criteria>

<examples>
<example1>
<title>Catering Corporativo con Especificaciones Personalizadas</title>
<input>
Dominio: Catering corporativo
Empresa: "Chevron"
Especificaciones adicionales: "Incluir informaci√≥n nutricional, destacar opciones veganas, usar formato premium con colores corporativos"
Productos: 
- Teque√±os (100 unidades, $1.50 c/u)
- Jugo natural (15 litros, $3.50 c/u) 
- Pie de lim√≥n (20 unidades, $2.50 c/u)
Personas: 50
Costo por persona solicitado: True
</input>
<output>
‚Üí EMPRESA: "CHEVRON GLOBAL TECHNOLOGY SERVICES COMPANY"
‚Üí PROCESO: "Cotizaci√≥n - Catering Corporativo Torre Barcelona"
‚Üí CATEGORIZACI√ìN:
  ‚Ä¢ PASAPALOS SALADOS: Teque√±os (100 √ó $1.50 = $150.00)
  ‚Ä¢ BEBIDAS: Jugo natural (15 √ó $3.50 = $52.50)
  ‚Ä¢ POSTRES: Pie de lim√≥n (20 √ó $2.50 = $50.00)
‚Üí SUBTOTAL: $252.50
‚Üí COORDINACI√ìN Y LOG√çSTICA (18%): $45.45
‚Üí TOTAL: $297.95
‚Üí COSTO POR PERSONA: $297.95 √∑ 50 = $5.96
‚Üí FORMATO: Premium con informaci√≥n nutricional y destacado vegano
‚Üí CSS: Solo estilos compatibles con Playwright PDF
</output>
</example1>

<example2>
<title>Construcci√≥n con Configuraci√≥n Est√°ndar</title>
<input>
Dominio: Construcci√≥n
Empresa: "ConstruMax"
Especificaciones adicionales: Ninguna - usar configuraci√≥n est√°ndar
Productos:
- Cemento Gris (25 sacos, $9.00 c/u)
- Arena Lavada (5 m¬≥, $40.00 c/u)
- Varillas 3/8" (100 unidades, $12.00 c/u)
Personas: No aplica
Costo por persona solicitado: False
</input>
<output>
‚Üí EMPRESA: "CONSTRUMAX"
‚Üí PROCESO: "Cotizaci√≥n - Materiales de Construcci√≥n"
‚Üí PRODUCTOS (sin categorizaci√≥n espec√≠fica):
  ‚Ä¢ Cemento Gris: 25 sacos √ó $9.00 = $225.00
  ‚Ä¢ Arena Lavada: 5 m¬≥ √ó $40.00 = $200.00  
  ‚Ä¢ Varillas 3/8": 100 un √ó $12.00 = $1,200.00
‚Üí SUBTOTAL: $1,625.00
‚Üí COORDINACI√ìN Y LOG√çSTICA (18%): $292.50
‚Üí TOTAL: $1,917.50
‚Üí FORMATO: Est√°ndar profesional
‚Üí NO mostrar costo por persona
‚Üí HTML limpio sin marcadores de c√≥digo
</output>
</example2>

<example3>
<title>Venta Directa Simplificada</title>
<input>
Dominio: Venta directa de productos tecnol√≥gicos
Empresa: "TechStore"
Especificaciones adicionales: "Formato minimalista, solo productos y totales, sin servicios adicionales"
Productos:
- Laptop HP (2 unidades, $850.00 c/u)
- Mouse inal√°mbrico (2 unidades, $25.00 c/u)
- Teclado mec√°nico (2 unidades, $45.00 c/u)
Personas: No aplica
Costo por persona solicitado: False
</input>
<output>
‚Üí EMPRESA: "TECHSTORE"
‚Üí PROCESO: "Cotizaci√≥n - Equipos Tecnol√≥gicos"
‚Üí PRODUCTOS (lista simple):
  ‚Ä¢ Laptop HP: 2 un √ó $850.00 = $1,700.00
  ‚Ä¢ Mouse inal√°mbrico: 2 un √ó $25.00 = $50.00
  ‚Ä¢ Teclado mec√°nico: 2 un √ó $45.00 = $90.00
‚Üí SUBTOTAL: $1,840.00
‚Üí NO incluir coordinaci√≥n y log√≠stica (venta directa simple)
‚Üí TOTAL: $1,840.00
‚Üí FORMATO: Minimalista seg√∫n especificaciones
‚Üí CSS: Estilos b√°sicos compatibles con PDF
</output>
</example3>
</examples>

CSS_COMPATIBILITY_RULES:
OBLIGATORIO USAR:
- display: flex, grid, block, inline-block
- font-family: Arial, sans-serif (web-safe)
- font-size en px o pt
- margin, padding en px, cm o %
- border: 1px solid #color
- background-color con -webkit-print-color-adjust: exact !important
- color con !important para elementos cr√≠ticos
- text-align, font-weight, font-style
- width, height en px, % o cm
- border-radius, box-shadow (efectos b√°sicos)

PROHIBIDO USAR:
- viewport units (vw, vh, vmin, vmax)
- hover, focus, active states
- transition, animation properties
- backdrop-filter, filter complejos
- position: fixed (problem√°tico en PDF)
- rem units (usar px o pt)
- JavaScript-dependent classes
- @media queries complejas

IMPORTANTE:
- Mant√©n nombres de productos simples y profesionales
- Usa precios exactos definidos en los datos de entrada
- Aseg√∫rate que todas las operaciones matem√°ticas sean correctas
- Fecha actual para [FECHA]: {datetime.now().strftime('%d/%m/%y')}
- NUNCA incluir marcadores ```html o ``` en el output
- Responde SOLO con HTML completo y funcional, sin explicaciones adicionales

RESPONDE √öNICAMENTE CON HTML COMPLETO Y FUNCIONAL (SIN ```html NI ``` AL INICIO O FINAL):
"""

        
        return prompt
    
    def _build_pricing_instructions(self, pricing_calculation, pricing_config) -> str:
        """Construye instrucciones espec√≠ficas de pricing para la IA"""
        try:
            instructions = ["CONFIGURACIONES DE PRICING APLICADAS:"]
            
            # Informaci√≥n del subtotal
            instructions.append(f"SUBTOTAL BASE: ${pricing_calculation.subtotal:.2f}")
            
            # Configuraci√≥n de coordinaci√≥n
            if pricing_calculation.coordination_enabled:
                rate_percent = pricing_calculation.coordination_rate * 100
                instructions.append(f"‚úÖ COORDINACI√ìN HABILITADA:")
                instructions.append(f"   - Agregar {rate_percent:.1f}% de coordinaci√≥n y log√≠stica")
                instructions.append(f"   - Monto de coordinaci√≥n: ${pricing_calculation.coordination_amount:.2f}")
                instructions.append(f"   - Mostrar como l√≠nea separada: 'Coordinaci√≥n y log√≠stica ({rate_percent:.1f}%): ${pricing_calculation.coordination_amount:.2f}'")
            else:
                instructions.append("‚ùå COORDINACI√ìN DESHABILITADA: No agregar coordinaci√≥n al presupuesto")
            
            # Configuraci√≥n de costo por persona
            if pricing_calculation.cost_per_person_enabled and pricing_calculation.headcount:
                instructions.append(f"‚úÖ COSTO POR PERSONA HABILITADO:")
                instructions.append(f"   - N√∫mero de personas: {pricing_calculation.headcount}")
                instructions.append(f"   - Costo por persona: ${pricing_calculation.cost_per_person:.2f}")
                instructions.append(f"   - Incluir al final: 'Costo por persona: ${pricing_calculation.cost_per_person:.2f} ({pricing_calculation.headcount} personas)'")
            else:
                instructions.append("‚ùå COSTO POR PERSONA DESHABILITADO: No mostrar c√°lculo por persona")
            
            # Configuraci√≥n de impuestos
            if pricing_calculation.taxes_enabled:
                rate_percent = pricing_calculation.tax_rate * 100
                instructions.append(f"‚úÖ IMPUESTOS HABILITADOS:")
                instructions.append(f"   - Tasa de impuesto: {rate_percent:.1f}%")
                instructions.append(f"   - Monto de impuesto: ${pricing_calculation.tax_amount:.2f}")
                instructions.append(f"   - Mostrar l√≠nea de impuesto antes del total final")
            else:
                instructions.append("‚ùå IMPUESTOS DESHABILITADOS: No agregar impuestos")
            
            # Total final
            instructions.append(f"TOTAL FINAL CALCULADO: ${pricing_calculation.total_cost:.2f}")
            
            instructions.append("")
            instructions.append("INSTRUCCIONES CR√çTICAS:")
            instructions.append("- Usa exactamente los montos calculados arriba")
            instructions.append("- No inventes nuevos c√°lculos")
            instructions.append("- Respeta las configuraciones habilitadas/deshabilitadas")
            instructions.append("- Mant√©n la estructura del template HTML")
            instructions.append("- El total final debe ser exactamente el TOTAL FINAL CALCULADO")
            
            return "\n".join(instructions)
            
        except Exception as e:
            logger.error(f"‚ùå Error building pricing instructions: {e}")
            return "CONFIGURACIONES DE PRICING: Usar configuraci√≥n est√°ndar (coordinaci√≥n 18%)"
    
    def _build_currency_instructions(self, currency: str) -> str:
        """üÜï Construye instrucciones espec√≠ficas de moneda para la IA"""
        try:
            # Mapeo de monedas a s√≠mbolos y formatos
            currency_config = {
                "USD": {"symbol": "$", "name": "D√≥lares Americanos", "format": "$1,000.00", "position": "before"},
                "EUR": {"symbol": "‚Ç¨", "name": "Euros", "format": "‚Ç¨1.000,00", "position": "before"},
                "GBP": {"symbol": "¬£", "name": "Libras Esterlinas", "format": "¬£1,000.00", "position": "before"},
                "JPY": {"symbol": "¬•", "name": "Yenes", "format": "¬•1,000", "position": "before"},
                "MXN": {"symbol": "$", "name": "Pesos Mexicanos", "format": "$1,000.00 MXN", "position": "before"},
                "CAD": {"symbol": "C$", "name": "D√≥lares Canadienses", "format": "C$1,000.00", "position": "before"},
                "AUD": {"symbol": "A$", "name": "D√≥lares Australianos", "format": "A$1,000.00", "position": "before"},
                "BRL": {"symbol": "R$", "name": "Reales Brasile√±os", "format": "R$1.000,00", "position": "before"},
                "COP": {"symbol": "$", "name": "Pesos Colombianos", "format": "$1.000,00 COP", "position": "before"},
                "CHF": {"symbol": "CHF", "name": "Francos Suizos", "format": "CHF 1,000.00", "position": "before"}
            }
            
            config = currency_config.get(currency, {
                "symbol": "$", 
                "name": "D√≥lares (USD)", 
                "format": "$1,000.00", 
                "position": "before"
            })
            
            instructions = [
                f"MONEDA DE LA SOLICITUD: {currency}",
                f"NOMBRE COMPLETO: {config['name']}",
                f"S√çMBOLO A USAR: {config['symbol']}",
                f"FORMATO DE EJEMPLO: {config['format']}",
                "",
                "INSTRUCCIONES CR√çTICAS PARA MONEDA:",
                f"1. USAR EXCLUSIVAMENTE la moneda {currency} para todos los precios",
                f"2. Mostrar s√≠mbolo '{config['symbol']}' antes de cada cantidad monetaria",
                f"3. Formato de n√∫meros: usar comas para miles y punto para decimales (ej: {config['format']})",
                f"4. NO cambiar la moneda a USD si la solicitud es en {currency}",
                f"5. Mantener consistencia: todos los precios deben usar {config['symbol']}",
                f"6. En t√≠tulos/encabezados mencionar 'Presupuesto en {config['name']}'",
                "",
                "EJEMPLOS DE FORMATO CORRECTO:",
                f"- Subtotal: {config['symbol']}1,250.00",
                f"- Coordinaci√≥n y log√≠stica: {config['symbol']}225.00", 
                f"- Total: {config['symbol']}1,475.00",
                "",
                "IMPORTANTE:",
                f"- La moneda {currency} fue detectada autom√°ticamente del documento original",
                f"- Respetar la moneda original es crucial para la precisi√≥n comercial",
                f"- NO inventar tasas de cambio ni convertir a otras monedas"
            ]
            
            return "\n".join(instructions)
            
        except Exception as e:
            logger.error(f"‚ùå Error building currency instructions: {e}")
            return f"MONEDA: Usar {currency} con s√≠mbolo correspondiente para todos los precios"

    def _build_compact_ai_prompt(self, rfx_data: Dict[str, Any], proposal_request: ProposalRequest) -> str:
        """Versi√≥n compacta del prompt para reintento en caso de timeout.
        - No incrusta el HTML completo del template, solo instrucciones clave y marcadores.
        - Reduce tokens para acelerar la respuesta.
        """
        client_info = rfx_data.get("companies", {}) if isinstance(rfx_data.get("companies"), dict) else {}
        productos = rfx_data.get("productos", [])
        
        # üÜï Extraer moneda para prompt compacto
        rfx_currency = rfx_data.get("currency", "USD")

        productos_info = []
        for producto in productos:
            productos_info.append({
                "nombre": producto.get("name", producto.get("nombre", "product")),
                "cantidad": producto.get("quantity", producto.get("cantidad", 1)),
                "unidad": producto.get("unit", producto.get("unidad", "units")),
                "precio_unitario": producto.get("estimated_unit_price", 0.0),
                "total": producto.get("total_estimated_cost", 0.0)
            })

        compact_template = """
<!DOCTYPE html>
<html lang=\"es\">
<head>
  <meta charset=\"UTF-8\" />
  <title>Propuesta Comercial</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    .company-name { color: #2c5f7c; font-size: 28px; font-weight: bold; }
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid #000; padding: 6px; text-align: left; }
    th { background: #f0f0f0; }
    .final-total { font-weight: bold; background: #e0e0e0; }
  </style>
  <!-- Marcadores: [FECHA], [NUMERO], [CLIENTE], [EMPRESA], [PROCESO], [PRODUCTOS_ROWS], [SUBTOTAL], [TOTAL] -->
  <!-- Usa est√©tica similar a test_design.html pero mant√©n salida breve -->
  <!-- No a√±adas texto fuera del HTML -->
</head>
<body>
  <div class=\"company-name\">sabra corporation</div>
  <h2>Propuesta Comercial</h2>
  <div>Cliente: [CLIENTE] ‚Ä¢ Empresa: [EMPRESA]</div>
  <div>Lugar: {rfx_data.get('location', 'Por definir')} ‚Ä¢ Fecha: {rfx_data.get('delivery_date', 'Por definir')}</div>
  <table>
    <thead>
      <tr><th>Descripci√≥n</th><th>Cant</th><th>Precio</th><th>Total</th></tr>
    </thead>
    <tbody>
      [PRODUCTOS_ROWS]
      <tr class=\"final-total\"><td colspan=\"3\">Total</td><td>[TOTAL]</td></tr>
    </tbody>
  </table>
</body>
</html>
"""

        prompt = f"""
Eres un generador de propuestas para sabra corporation.

USA ESTA PLANTILLA RESUMIDA COMO BASE (reemplaza marcadores exactamente):
{compact_template}

DATOS DEL RFX:
Solicitante: {client_info.get('name', 'Solicitante')}
Email: {client_info.get('email', '')}
Lugar: {rfx_data.get('location', 'Por definir')}
Fecha entrega: {rfx_data.get('delivery_date', 'Por definir')}

PRODUCTOS CON PRECIOS REALES:
{json.dumps(productos_info, ensure_ascii=False, indent=2)}

INSTRUCCIONES CLAVE:
- Calcula total por fila = cantidad √ó precio_unitario cuando total==0.
- Suma para el Total final.
- Rellena [CLIENTE] (may√∫sculas), [EMPRESA] (versi√≥n oficial si es abreviada), [PRODUCTOS_ROWS] y [TOTAL].
- MONEDA: Usar {rfx_currency} para todos los precios con s√≠mbolo correspondiente
- Mant√©n HTML breve, v√°lido y limpio. Responde SOLO el HTML completo, sin comentarios.
- Fecha actual para [FECHA]: {datetime.now().strftime('%d/%m/%y')}
"""

        return prompt
    
    async def _call_openai(self, prompt: str, max_tokens: Optional[int] = None) -> str:
        """Llamada a OpenAI con opciones de timeout y control de tokens.
        Usa el timeout configurado globalmente y reduce latencia.
        """
        openai_client = self._get_openai_client()

        # Aplicar opciones (timeout configurable)
        client_with_timeout = getattr(openai_client, "with_options", None)
        if callable(client_with_timeout):
            client = openai_client.with_options(timeout=self.openai_config.timeout)
        else:
            client = openai_client

        effective_max_tokens = max_tokens if max_tokens is not None else min(2500, self.openai_config.max_tokens)

        logger.debug(f"ü§ñ Calling OpenAI with model: {self.openai_config.model}, max_tokens={effective_max_tokens}, timeout={self.openai_config.timeout}s")

        try:
            response = client.chat.completions.create(
                model=self.openai_config.model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=effective_max_tokens,
                temperature=0.2
            )
        except Exception as e:
            logger.error(f"‚ùå OpenAI call failed: {e}")
            raise

        generated_html = (response.choices[0].message.content or "").strip()

        logger.debug(f"ü§ñ OpenAI response length: {len(generated_html)} characters")
        logger.debug(f"ü§ñ OpenAI response preview: {generated_html[:300]}...")

        return generated_html
    
    def _validate_html(self, html: str) -> bool:
        """Validaci√≥n flexible del HTML generado"""
        
        # Validaciones b√°sicas de estructura HTML
        basic_html_structure = [
            '<!DOCTYPE html>',
            '<html',
            '</html>',
            '<head',
            '<body'
        ]
        
        # Validaciones de contenido empresarial (m√°s flexibles)
        business_content = [
            'sabra',  # Nombre empresa (case insensitive)
            '<table',  # Debe tener tabla
            '</table>'
        ]
        
        # Validaciones de precios (m√°s flexibles - acepta $0.00 o precios reales)
        price_indicators = [
            '$',  # S√≠mbolo de d√≥lar
            'total',  # Palabra total
            'precio'  # Palabra precio
        ]
        
        # Validaciones opcionales (al menos una debe estar presente)
        content_indicators = [
            'presupuesto', 'propuesta', 'cotizaci√≥n',  # T√≠tulos posibles
            'total', 'subtotal', 'costo'  # T√©rminos de costo
        ]
        
        html_lower = html.lower()
        
        # Verificar estructura b√°sica HTML
        html_valid = all(element.lower() in html_lower for element in basic_html_structure)
        
        # Verificar contenido empresarial
        business_valid = all(element.lower() in html_lower for element in business_content)
        
        # Verificar que tenga al menos un indicador de precios
        price_valid = any(indicator.lower() in html_lower for indicator in price_indicators)
        
        # Verificar que tenga al menos un indicador de contenido
        content_valid = any(indicator in html_lower for indicator in content_indicators)
        
        # Verificar longitud m√≠nima
        length_valid = len(html) > 300  # Reducido de 500 a 300 para ser m√°s flexible
        
        is_valid = html_valid and business_valid and price_valid and content_valid and length_valid
        
        if not is_valid:
            logger.warning(f"‚ùå HTML validation failed:")
            logger.warning(f"  - HTML structure: {html_valid}")
            logger.warning(f"  - Business content: {business_valid}")
            logger.warning(f"  - Price indicators: {price_valid}")
            logger.warning(f"  - Content indicators: {content_valid}")
            logger.warning(f"  - Length valid (>{300}): {length_valid} (actual: {len(html)})")
            logger.debug(f"  - HTML preview: {html[:200]}...")
        else:
            logger.info(f"‚úÖ HTML validation passed successfully!")
            logger.info(f"  - HTML structure: {html_valid}")
            logger.info(f"  - Business content: {business_valid}")
            logger.info(f"  - Price indicators: {price_valid}")
            logger.info(f"  - Content indicators: {content_valid}")
            logger.info(f"  - Length valid: {length_valid} ({len(html)} chars)")
        
        return is_valid
    
    def _create_proposal_object(self, rfx_data: Dict[str, Any], html_content: str, proposal_request: ProposalRequest) -> GeneratedProposal:
        """Crea objeto GeneratedProposal V2.0 a partir del HTML"""
        
        client_info = rfx_data.get("companies", {}) if isinstance(rfx_data.get("companies"), dict) else {}
        proposal_id = uuid.uuid4()  # UUID object, not string
        rfx_uuid = uuid.UUID(proposal_request.rfx_id) if isinstance(proposal_request.rfx_id, str) else proposal_request.rfx_id
        
        # Obtener total del c√°lculo de pricing en lugar de extraerlo del HTML
        productos = rfx_data.get("productos", [])
        subtotal = sum(p.get("estimated_unit_price", 0) * p.get("quantity", 0) for p in productos)
        pricing_calculation = self.pricing_service.calculate_pricing(proposal_request.rfx_id, subtotal)
        total_cost = pricing_calculation.total_cost
        
        return GeneratedProposal(
            id=proposal_id,
            rfx_id=rfx_uuid,
            content_markdown="",  # Optional in V2.0
            content_html=html_content,
            itemized_costs=[],  # Simplified: AI handles everything
            total_cost=total_cost,
            notes=proposal_request.notes,
            status=ProposalStatus.GENERATED,
            created_at=datetime.now(),
            updated_at=datetime.now(),
            metadata={
                "client_name": client_info.get("name", "Solicitante"),
                "client_email": client_info.get("email", ""),
                "products_count": len(rfx_data.get("productos", [])),
                "generation_method": "ai_template_simplified",
                "ai_model": self.openai_config.model,
                "document_type": "commercial_proposal",
                "generation_version": "2.0_with_pricing_config",
                # Pricing configuration metadata
                "pricing": {
                    "subtotal": pricing_calculation.subtotal,
                    "coordination_enabled": pricing_calculation.coordination_enabled,
                    "coordination_amount": pricing_calculation.coordination_amount,
                    "cost_per_person_enabled": pricing_calculation.cost_per_person_enabled,
                    "headcount": pricing_calculation.headcount,
                    "cost_per_person": pricing_calculation.cost_per_person,
                    "taxes_enabled": pricing_calculation.taxes_enabled,
                    "tax_amount": pricing_calculation.tax_amount,
                    "applied_configs": pricing_calculation.applied_configs
                }
            }
        )
    
    def _extract_total_from_html(self, html: str) -> float:
        """Extrae el costo total del HTML generado usando regex - maneja formato espa√±ol"""
        
        # Patrones para diferentes formatos de total (espa√±ol y US)
        total_patterns = [
            # Formato con s√≠mbolo de d√≥lar
            r'Total[^$]*\$(\d+[,.]?\d*)',
            r'<td[^>]*>.*?\$(\d+[,.]?\d*).*?</td>[^<]*</tr>[^<]*</table>',
            r'final-total[^$]*\$(\d+[,.]?\d*)',
            
            # Formato espa√±ol sin s√≠mbolo (n√∫meros con coma decimal)
            r'Total[^>]*>[\s]*(\d+,\d+)[\s]*<',  # Total>605,34<
            r'<td[^>]*>\s*(\d+,\d+)\s*</td>(?=\s*</tr>\s*</table>)',  # √öltima celda antes de cerrar tabla
            r'total[^>]*>\s*(\d+,\d+)',  # class="total">605,34
            r'font-weight:\s*bold[^>]*>\s*(\d+,\d+)',  # style con bold
            
            # Formato US sin s√≠mbolo (n√∫meros con punto decimal)  
            r'Total[^>]*>[\s]*(\d+\.\d+)[\s]*<',
            r'<td[^>]*>\s*(\d+\.\d+)\s*</td>(?=\s*</tr>\s*</table>)',
            r'total[^>]*>\s*(\d+\.\d+)',
            r'font-weight:\s*bold[^>]*>\s*(\d+\.\d+)'
        ]
        
        logger.debug(f"üîç Extracting total from HTML length: {len(html)}")
        
        for i, pattern in enumerate(total_patterns):
            matches = re.findall(pattern, html, re.IGNORECASE | re.DOTALL)
            if matches:
                try:
                    total_str = matches[-1].strip()
                    # Manejar formato espa√±ol (coma decimal) vs US (punto decimal)
                    if ',' in total_str and '.' not in total_str:
                        # Formato espa√±ol: 605,34 -> 605.34
                        total_str = total_str.replace(',', '.')
                    elif ',' in total_str and '.' in total_str:
                        # Formato con miles: 1,605.34 -> 1605.34
                        total_str = total_str.replace(',', '')
                    
                    total_value = float(total_str)
                    logger.info(f"‚úÖ Total extra√≠do exitosamente: {total_value} (patr√≥n {i+1}: {pattern[:50]}...)")
                    return total_value
                except ValueError as e:
                    logger.debug(f"   Patr√≥n {i+1} fall√≥ conversi√≥n: {total_str} -> {e}")
                    continue
        
        # Si no se encontr√≥, mostrar parte del HTML para debugging
        html_preview = html[-500:] if len(html) > 500 else html
        logger.warning(f"‚ùå No se pudo extraer total del HTML")
        logger.debug(f"   HTML final (√∫ltimos 500 chars): {html_preview}")
        return 0.0
    
    async def _save_to_database(self, proposal: GeneratedProposal) -> None:
        """Guarda propuesta en base de datos de forma simple"""
        
        document_data = {
            "id": str(proposal.id),  # Convert UUID to string for database
            "rfx_id": str(proposal.rfx_id),  # Convert UUID to string for database
            "document_type": "proposal",  # Direct V2.0 field name
            "content_html": proposal.content_html,  # Direct V2.0 field name
            "total_cost": proposal.total_cost,  # Direct V2.0 field name
            "created_at": proposal.created_at.isoformat(),  # Direct V2.0 field name
            "metadata": proposal.metadata,  # Direct V2.0 field name
            "version": 1  # Required field
        }
        
        try:
            logger.debug(f"üîç Attempting to save document data: {list(document_data.keys())}")
            logger.debug(f"üîç Document ID: {document_data['id']}, RFX ID: {document_data['rfx_id']}")
            logger.debug(f"üîç Content length: {len(document_data['content_html'])}")
            logger.debug(f"üîç Total cost being saved: {document_data['total_cost']}")
            
            result_id = self.db_client.save_generated_document(document_data)
            logger.info(f"üíæ Propuesta guardada en BD: {result_id}")
        except Exception as e:
            error_msg = str(e).lower()
            
            # Handle duplicate key constraint gracefully
            if "duplicate key" in error_msg or "already exists" in error_msg:
                logger.warning(f"‚ö†Ô∏è Document already exists in database: {document_data['id']}")
                logger.info(f"üíæ Using existing document ID: {document_data['id']}")
                # Don't fail - document exists is acceptable
            else:
                logger.error(f"‚ùå Error guardando en BD: {e}")
                logger.error(f"‚ùå Document data that failed: {document_data}")
                # Don't fail the generation for database errors, but log them
    
    def _generate_basic_fallback(self, rfx_data: Dict[str, Any]) -> str:
        """Genera HTML ultra-b√°sico en caso de fallo total"""
        
        client_info = rfx_data.get("clientes", {}) if isinstance(rfx_data.get("clientes"), dict) else {}
        client_name = client_info.get("nombre", "SOLICITANTE")
        productos_count = len(rfx_data.get("productos", []))
        fecha_actual = datetime.now().strftime("%d/%m/%y")
        numero_prop = f"PROP-{datetime.now().strftime('%d%m%y')}-ERR"
        
        return f"""<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Propuesta Comercial - {client_name}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; font-size: 12px; }}
        .company-name {{ color: #2c5f7c; font-size: 28px; font-weight: bold; margin-bottom: 10px; }}
        .company-subtitle {{ color: #2c5f7c; font-size: 14px; margin-bottom: 20px; }}
        .budget-box {{ border: 2px solid #000; padding: 10px; margin-bottom: 20px; width: 200px; }}
        .error {{ color: #ff6b6b; font-style: italic; margin: 10px 0; }}
        table {{ border-collapse: collapse; width: 100%; margin: 10px 0; }}
        th, td {{ border: 1px solid #000; padding: 8px; text-align: left; }}
        th {{ background-color: #f0f0f0; }}
        .total {{ font-weight: bold; background-color: #e0e0e0; }}
    </style>
</head>
<body>
    <div class="company-name">sabra</div>
    <div class="company-subtitle">corporation</div>
    
    <div class="budget-box">
        <strong>PRESUPUESTO</strong><br>
        Fecha: {fecha_actual}<br>
        Duraci√≥n: 20 d√≠as<br>
        #: {numero_prop}
    </div>
    
    <div>
        <strong>Para: {client_name.upper()}</strong><br>
        <strong>Proceso: PLC - Catering</strong>
    </div>
    
    <table>
        <tr>
            <th>Descripci√≥n</th>
            <th>Cant</th>
            <th>Precio unitario</th>
            <th>Total</th>
        </tr>
        <tr>
            <td>Servicios de catering</td>
            <td>{productos_count}</td>
            <td>$0.00</td>
            <td>$0.00</td>
        </tr>
        <tr class="total">
            <td colspan="3"><strong>Total</strong></td>
            <td><strong>$0.00</strong></td>
        </tr>
    </table>
    
    <p class="error">Propuesta generada con template b√°sico por error en generaci√≥n IA</p>
</body>
</html>"""


# Funci√≥n de conveniencia para uso externo
async def generate_commercial_proposal(rfx_data: Dict[str, Any], proposal_request: ProposalRequest) -> GeneratedProposal:
    """
    Funci√≥n utilitaria simplificada para generar propuestas comerciales
    
    Args:
        rfx_data: Datos del RFX
        proposal_request: Configuraciones de la propuesta
        
    Returns:
        GeneratedProposal: Propuesta lista para mostrar en frontend
    """
    service = ProposalGenerationService()
    return await service.generate_proposal(rfx_data, proposal_request)
